import { exec } from 'child_process';
/**
 * Uses the Mac's java_home utility to find an appropriate version of Java.
 */
export default function macFindJavaHome(cb) {
    exec('/usr/libexec/java_home -V', (err, stdout, stderr) => {
        /*
          Output example, which java_home prints to stderr [!]:
          Matching Java Virtual Machines (4):
            1.8.0_60, x86_64:	"Java SE 8"	/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home
            1.7.0_79, x86_64:	"Java SE 7"	/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home
            1.6.0_65-b14-468, x86_64:	"Java SE 6"	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
            1.6.0_65-b14-468, i386:	"Java SE 6"	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
         */
        // Ditch boilerplate first line, and trim ending newlines.
        let installations = stderr.toString().trim().split('\n').slice(1);
        // Map to paths.
        // TODO: We assume that quotes cannot be in the paths.
        installations = installations.map((install) => install.slice(install.lastIndexOf('"') + 1).trim());
        cb(installations);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFyd2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHMvbGliL3BsYXRmb3Jtcy9kYXJ3aW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVuQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxPQUFPLFVBQVUsZUFBZSxDQUFDLEVBQTJEO0lBQ2pHLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDLEdBQWlCLEVBQUUsTUFBdUIsRUFBRSxNQUF1QixFQUFFLEVBQUU7UUFDeEc7Ozs7Ozs7V0FPRztRQUNILDBEQUEwRDtRQUMxRCxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRSxnQkFBZ0I7UUFDaEIsc0RBQXNEO1FBQ3RELGFBQWEsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtleGVjfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuLyoqXG4gKiBVc2VzIHRoZSBNYWMncyBqYXZhX2hvbWUgdXRpbGl0eSB0byBmaW5kIGFuIGFwcHJvcHJpYXRlIHZlcnNpb24gb2YgSmF2YS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFjRmluZEphdmFIb21lKGNiOiAoaG9tZXM6IHN0cmluZ1tdLCBleGVjdXRhYmxlRXh0ZW5zaW9uPzogc3RyaW5nKSA9PiB2b2lkKTogdm9pZCB7XG4gIGV4ZWMoJy91c3IvbGliZXhlYy9qYXZhX2hvbWUgLVYnLCAoZXJyOiBFcnJvciB8IG51bGwsIHN0ZG91dDogQnVmZmVyIHwgc3RyaW5nLCBzdGRlcnI6IEJ1ZmZlciB8IHN0cmluZykgPT4ge1xuICAgIC8qXG4gICAgICBPdXRwdXQgZXhhbXBsZSwgd2hpY2ggamF2YV9ob21lIHByaW50cyB0byBzdGRlcnIgWyFdOlxuICAgICAgTWF0Y2hpbmcgSmF2YSBWaXJ0dWFsIE1hY2hpbmVzICg0KTpcbiAgICAgICAgMS44LjBfNjAsIHg4Nl82NDpcdFwiSmF2YSBTRSA4XCJcdC9MaWJyYXJ5L0phdmEvSmF2YVZpcnR1YWxNYWNoaW5lcy9qZGsxLjguMF82MC5qZGsvQ29udGVudHMvSG9tZVxuICAgICAgICAxLjcuMF83OSwgeDg2XzY0Olx0XCJKYXZhIFNFIDdcIlx0L0xpYnJhcnkvSmF2YS9KYXZhVmlydHVhbE1hY2hpbmVzL2pkazEuNy4wXzc5Lmpkay9Db250ZW50cy9Ib21lXG4gICAgICAgIDEuNi4wXzY1LWIxNC00NjgsIHg4Nl82NDpcdFwiSmF2YSBTRSA2XCJcdC9MaWJyYXJ5L0phdmEvSmF2YVZpcnR1YWxNYWNoaW5lcy8xLjYuMC5qZGsvQ29udGVudHMvSG9tZVxuICAgICAgICAxLjYuMF82NS1iMTQtNDY4LCBpMzg2Olx0XCJKYXZhIFNFIDZcIlx0L0xpYnJhcnkvSmF2YS9KYXZhVmlydHVhbE1hY2hpbmVzLzEuNi4wLmpkay9Db250ZW50cy9Ib21lXG4gICAgICovXG4gICAgLy8gRGl0Y2ggYm9pbGVycGxhdGUgZmlyc3QgbGluZSwgYW5kIHRyaW0gZW5kaW5nIG5ld2xpbmVzLlxuICAgIGxldCBpbnN0YWxsYXRpb25zID0gc3RkZXJyLnRvU3RyaW5nKCkudHJpbSgpLnNwbGl0KCdcXG4nKS5zbGljZSgxKTtcbiAgICAvLyBNYXAgdG8gcGF0aHMuXG4gICAgLy8gVE9ETzogV2UgYXNzdW1lIHRoYXQgcXVvdGVzIGNhbm5vdCBiZSBpbiB0aGUgcGF0aHMuXG4gICAgaW5zdGFsbGF0aW9ucyA9IGluc3RhbGxhdGlvbnMubWFwKChpbnN0YWxsKSA9PiBpbnN0YWxsLnNsaWNlKGluc3RhbGwubGFzdEluZGV4T2YoJ1wiJykgKyAxKS50cmltKCkpO1xuICAgIGNiKGluc3RhbGxhdGlvbnMpO1xuICB9KTtcbn1cbiJdfQ==