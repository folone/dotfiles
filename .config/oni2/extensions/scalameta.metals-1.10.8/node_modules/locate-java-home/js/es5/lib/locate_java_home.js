"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const child_process_1 = require("child_process");
const semver_1 = require("semver");
const async_1 = require("async");
const platform_1 = require("./platform");
const defaultOptions = {
    version: "*",
    mustBeJDK: false,
    mustBeJRE: false,
    paranoid: false,
    mustBe64Bit: false
};
/**
 * Return an ILocateJavaHomeOptions object with defaults filled in.
 */
function fillInDefaults(opts) {
    // semver standardization
    if (opts.version === 'any') {
        opts.version = "*";
    }
    return Object.assign({}, defaultOptions, opts);
}
function locateJavaHome(arg1, arg2) {
    let options = defaultOptions;
    let cb = arg1;
    if (arg2) {
        cb = arg2;
        options = fillInDefaults(arg1);
    }
    // Sanity check
    if (options.mustBeJDK && options.mustBeJRE) {
        return cb(new Error(`Unsatisfiable options: A JAVA_HOME cannot be both a JDK and not a JDK.`), []);
    }
    let locateJavaHome = platform_1.default(process.platform);
    locateJavaHome((homes, executableExtension) => {
        const homeInfos = [];
        // NOTE: We don't use async.map here because we want to be error tolerant
        // in case some of the JAVA_HOME locations are erroneous.
        async_1.each(homes, (home, asyncCb) => {
            getJavaHomeInfo(home, executableExtension, (err, homeInfo) => {
                if (!err) {
                    // Push the info and continue iteration.
                    homeInfos.push(homeInfo);
                    asyncCb();
                }
                else if (options.paranoid) {
                    // Report the error, halting iteration.
                    asyncCb(err);
                }
                else {
                    // Ignore JAVA_HOME.
                    asyncCb();
                }
            });
        }, (err) => {
            var seenPaths = {};
            if (err) {
                cb(err);
            }
            else {
                cb(null, homeInfos
                    .filter((homeInfo) => {
                    // Absolute pathify.
                    homeInfo.path = path_1.resolve(homeInfo.path);
                    // Filter redundant paths.
                    if (seenPaths[homeInfo.path]) {
                        return false;
                    }
                    else {
                        seenPaths[homeInfo.path] = true;
                    }
                    // JDK constraint
                    return (!options.mustBeJDK || homeInfo.isJDK)
                        // JRE constraint
                        && (!options.mustBeJRE || !homeInfo.isJDK)
                        // 64-bit constraint
                        && (!options.mustBe64Bit || homeInfo.is64Bit)
                        // version constraint
                        && semver_1.satisfies(homeInfo.version, options.version);
                }).sort((a, b) => a.path.localeCompare(b.path)));
            }
        });
    });
}
/**
 * Get the IJavaHomeInfo object for the given path.
 */
function getJavaHomeInfo(home, executableExtension, cb) {
    const javaPath = getBinaryPath(home, 'java', executableExtension);
    const javacPath = getBinaryPath(home, 'javac', executableExtension);
    if (!javaPath) {
        return cb(new Error(`Unable to locate 'java' executable in path ${home}`));
    }
    getJavaVersionAndDataModel(javaPath, (err, version, security, is64Bit) => {
        if (err) {
            cb(err);
        }
        else {
            let info = {
                path: home,
                version: version,
                security: security,
                isJDK: javacPath !== null,
                is64Bit: is64Bit,
                executables: {
                    java: javaPath
                }
            };
            if (javacPath) {
                info.executables.javac = javacPath;
                info.executables.javap = getBinaryPath(home, 'javap', executableExtension);
            }
            cb(null, info);
        }
    });
}
/**
 * Get the path to a binary in JAVA_HOME. Returns NULL if it does not exist.
 */
function getBinaryPath(home, name, executableExtension) {
    const binPath = path_1.resolve(home, 'bin', `${name}${executableExtension ? `.${executableExtension}` : ''}`);
    if (fs_1.existsSync(binPath)) {
        return binPath;
    }
    return null;
}
/**
 * Given a path to the java executable, get the version of JAVA_HOME.
 */
function getJavaVersionAndDataModel(javaPath, cb) {
    child_process_1.exec(`"${javaPath}" -version`, function (err, stdout, stderr) {
        if (err) {
            return cb(err);
        }
        // TODO: Make this more robust to errors.
        const output = stderr.toString();
        const versionData = /(\d+\.\d+\.\d+)(_(\d+))?/.exec(output);
        let version = "0.0.0";
        let security = 0;
        if (versionData !== null) {
            version = versionData[1];
            security = parseInt(versionData[3], 10);
            if (isNaN(security)) {
                security = 0;
            }
        }
        return cb(err, version, security, output.toLowerCase().indexOf("64-bit") !== -1);
    });
}
exports.default = locateJavaHome;
//# sourceMappingURL=data:application/json;base64,