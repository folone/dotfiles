"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const path_1 = require("path");
const fs_1 = require("fs");
/**
 * Find Java in Linux using three methods:
 * - `update-java-alternatives`,
 * - the JAVA_HOME environment variable
 * - Java on the PATH.
 */
function linuxFindJavaHome(cb) {
    const discoveredJavaHomes = [];
    // Option 1: Try the 'update-java-alternatives' tool
    child_process_1.exec('update-java-alternatives -l', (err, stdout, stderr) => {
        // This returns error code 1 on success, for some reason.
        if (!err || err.code == 1) {
            const alts = stdout.toString().trim().split('\n');
            for (const alt of alts) {
                // "java-1.7.0-openjdk-amd64 1071 /usr/lib/jvm/java-1.7.0-openjdk-amd64"
                discoveredJavaHomes.push(alt.split(' ')[2]);
            }
        }
        // Option 2: Is JAVA_HOME defined?
        // (NOTE: locate_java_home will prune redundancies.)
        if (process.env.JAVA_HOME) {
            discoveredJavaHomes.push(process.env.JAVA_HOME);
        }
        // Option 3: Can we invoke binary directly?
        function findByBinary(binaryName, newCb) {
            child_process_1.exec(`${binaryName} -version`, function (err, stdout, stderr) {
                if (err) {
                    // Nope. Return what we have.
                    cb(discoveredJavaHomes);
                }
                else {
                    // Find JAVA_HOME for Java.
                    child_process_1.exec(`which ${binaryName}`, function (err, stdout, stderr) {
                        if (!err) {
                            let javaPath = stdout.toString().trim();
                            // Trace path through symlinks
                            try {
                                while (1) {
                                    // Some symlinks are relative. .resolve is a NOP for absolute paths.
                                    javaPath = path_1.resolve(path_1.dirname(javaPath), fs_1.readlinkSync(javaPath));
                                }
                            }
                            catch (e) {
                                // We reached the end of the link chain.
                            }
                            // JAVA_HOME/bin/java => JAVA_HOME
                            discoveredJavaHomes.push(path_1.resolve(javaPath, "..", ".."));
                        }
                        newCb();
                    });
                }
            });
        }
        // Find JRE location
        findByBinary('java', function () {
            // Find JDK location, can be different
            findByBinary('javac', function () {
                cb(discoveredJavaHomes);
            });
        });
    });
}
exports.default = linuxFindJavaHome;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGludXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90cy9saWIvcGxhdGZvcm1zL2xpbnV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQW1DO0FBQ25DLCtCQUFxRDtBQUNyRCwyQkFBZ0M7QUFFaEM7Ozs7O0dBS0c7QUFDSCxTQUF3QixpQkFBaUIsQ0FBQyxFQUEyRDtJQUNuRyxNQUFNLG1CQUFtQixHQUFhLEVBQUUsQ0FBQztJQUN6QyxvREFBb0Q7SUFDcEQsb0JBQUksQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLEdBQWlCLEVBQUUsTUFBdUIsRUFBRSxNQUF1QixFQUFFLEVBQUU7UUFDMUcseURBQXlEO1FBQ3pELElBQUksQ0FBQyxHQUFHLElBQVUsR0FBSSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUU7WUFDaEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsRCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDdEIsd0VBQXdFO2dCQUN4RSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzdDO1NBQ0Y7UUFDRCxrQ0FBa0M7UUFDbEMsb0RBQW9EO1FBQ3BELElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUU7WUFDekIsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBVSxDQUFDLENBQUM7U0FDbEQ7UUFFRCwyQ0FBMkM7UUFDM0MsU0FBUyxZQUFZLENBQUMsVUFBa0IsRUFBRSxLQUFnQjtZQUN4RCxvQkFBSSxDQUFDLEdBQUcsVUFBVSxXQUFXLEVBQUUsVUFBVSxHQUFpQixFQUFFLE1BQXVCLEVBQUUsTUFBdUI7Z0JBQzFHLElBQUksR0FBRyxFQUFFO29CQUNQLDZCQUE2QjtvQkFDN0IsRUFBRSxDQUFDLG1CQUFtQixDQUFDLENBQUM7aUJBQ3pCO3FCQUFNO29CQUNMLDJCQUEyQjtvQkFDM0Isb0JBQUksQ0FBQyxTQUFTLFVBQVUsRUFBRSxFQUFFLFVBQVUsR0FBaUIsRUFBRSxNQUF1QixFQUFFLE1BQXVCO3dCQUN2RyxJQUFJLENBQUMsR0FBRyxFQUFFOzRCQUNSLElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs0QkFDeEMsOEJBQThCOzRCQUM5QixJQUFJO2dDQUNGLE9BQU8sQ0FBQyxFQUFFO29DQUNSLG9FQUFvRTtvQ0FDcEUsUUFBUSxHQUFHLGNBQVcsQ0FBQyxjQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsaUJBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2lDQUNuRTs2QkFDRjs0QkFBQyxPQUFPLENBQUMsRUFBRTtnQ0FDVix3Q0FBd0M7NkJBQ3pDOzRCQUNELGtDQUFrQzs0QkFDbEMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGNBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7eUJBQzdEO3dCQUNELEtBQUssRUFBRSxDQUFDO29CQUNWLENBQUMsQ0FBQyxDQUFDO2lCQUNKO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQ0Qsb0JBQW9CO1FBQ3BCLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDbkIsc0NBQXNDO1lBQ3RDLFlBQVksQ0FBQyxPQUFPLEVBQUU7Z0JBQ3BCLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUF0REQsb0NBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtleGVjfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7cmVzb2x2ZSBhcyByZXNvbHZlUGF0aCwgZGlybmFtZX0gZnJvbSAncGF0aCc7XG5pbXBvcnQge3JlYWRsaW5rU3luY30gZnJvbSAnZnMnO1xuXG4vKipcbiAqIEZpbmQgSmF2YSBpbiBMaW51eCB1c2luZyB0aHJlZSBtZXRob2RzOlxuICogLSBgdXBkYXRlLWphdmEtYWx0ZXJuYXRpdmVzYCxcbiAqIC0gdGhlIEpBVkFfSE9NRSBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICogLSBKYXZhIG9uIHRoZSBQQVRILlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaW51eEZpbmRKYXZhSG9tZShjYjogKGhvbWVzOiBzdHJpbmdbXSwgZXhlY3V0YWJsZUV4dGVuc2lvbj86IHN0cmluZykgPT4gdm9pZCk6IHZvaWQge1xuICBjb25zdCBkaXNjb3ZlcmVkSmF2YUhvbWVzOiBzdHJpbmdbXSA9IFtdO1xuICAvLyBPcHRpb24gMTogVHJ5IHRoZSAndXBkYXRlLWphdmEtYWx0ZXJuYXRpdmVzJyB0b29sXG4gIGV4ZWMoJ3VwZGF0ZS1qYXZhLWFsdGVybmF0aXZlcyAtbCcsIChlcnI6IEVycm9yIHwgbnVsbCwgc3Rkb3V0OiBCdWZmZXIgfCBzdHJpbmcsIHN0ZGVycjogQnVmZmVyIHwgc3RyaW5nKSA9PiB7XG4gICAgLy8gVGhpcyByZXR1cm5zIGVycm9yIGNvZGUgMSBvbiBzdWNjZXNzLCBmb3Igc29tZSByZWFzb24uXG4gICAgaWYgKCFlcnIgfHwgKDxhbnk+ZXJyKS5jb2RlID09IDEpIHtcbiAgICAgIGNvbnN0IGFsdHMgPSBzdGRvdXQudG9TdHJpbmcoKS50cmltKCkuc3BsaXQoJ1xcbicpO1xuICAgICAgZm9yIChjb25zdCBhbHQgb2YgYWx0cykge1xuICAgICAgICAvLyBcImphdmEtMS43LjAtb3Blbmpkay1hbWQ2NCAxMDcxIC91c3IvbGliL2p2bS9qYXZhLTEuNy4wLW9wZW5qZGstYW1kNjRcIlxuICAgICAgICBkaXNjb3ZlcmVkSmF2YUhvbWVzLnB1c2goYWx0LnNwbGl0KCcgJylbMl0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPcHRpb24gMjogSXMgSkFWQV9IT01FIGRlZmluZWQ/XG4gICAgLy8gKE5PVEU6IGxvY2F0ZV9qYXZhX2hvbWUgd2lsbCBwcnVuZSByZWR1bmRhbmNpZXMuKVxuICAgIGlmIChwcm9jZXNzLmVudi5KQVZBX0hPTUUpIHtcbiAgICAgIGRpc2NvdmVyZWRKYXZhSG9tZXMucHVzaChwcm9jZXNzLmVudi5KQVZBX0hPTUUhKTtcbiAgICB9XG5cbiAgICAvLyBPcHRpb24gMzogQ2FuIHdlIGludm9rZSBiaW5hcnkgZGlyZWN0bHk/XG4gICAgZnVuY3Rpb24gZmluZEJ5QmluYXJ5KGJpbmFyeU5hbWU6IHN0cmluZywgbmV3Q2I6ICgpID0+IGFueSkge1xuICAgICAgZXhlYyhgJHtiaW5hcnlOYW1lfSAtdmVyc2lvbmAsIGZ1bmN0aW9uIChlcnI6IEVycm9yIHwgbnVsbCwgc3Rkb3V0OiBCdWZmZXIgfCBzdHJpbmcsIHN0ZGVycjogQnVmZmVyIHwgc3RyaW5nKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAvLyBOb3BlLiBSZXR1cm4gd2hhdCB3ZSBoYXZlLlxuICAgICAgICAgIGNiKGRpc2NvdmVyZWRKYXZhSG9tZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZpbmQgSkFWQV9IT01FIGZvciBKYXZhLlxuICAgICAgICAgIGV4ZWMoYHdoaWNoICR7YmluYXJ5TmFtZX1gLCBmdW5jdGlvbiAoZXJyOiBFcnJvciB8IG51bGwsIHN0ZG91dDogQnVmZmVyIHwgc3RyaW5nLCBzdGRlcnI6IEJ1ZmZlciB8IHN0cmluZykge1xuICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgbGV0IGphdmFQYXRoID0gc3Rkb3V0LnRvU3RyaW5nKCkudHJpbSgpO1xuICAgICAgICAgICAgICAvLyBUcmFjZSBwYXRoIHRocm91Z2ggc3ltbGlua3NcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgICAgICAgLy8gU29tZSBzeW1saW5rcyBhcmUgcmVsYXRpdmUuIC5yZXNvbHZlIGlzIGEgTk9QIGZvciBhYnNvbHV0ZSBwYXRocy5cbiAgICAgICAgICAgICAgICAgIGphdmFQYXRoID0gcmVzb2x2ZVBhdGgoZGlybmFtZShqYXZhUGF0aCksIHJlYWRsaW5rU3luYyhqYXZhUGF0aCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgbGluayBjaGFpbi5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBKQVZBX0hPTUUvYmluL2phdmEgPT4gSkFWQV9IT01FXG4gICAgICAgICAgICAgIGRpc2NvdmVyZWRKYXZhSG9tZXMucHVzaChyZXNvbHZlUGF0aChqYXZhUGF0aCwgXCIuLlwiLCBcIi4uXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0NiKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBGaW5kIEpSRSBsb2NhdGlvblxuICAgIGZpbmRCeUJpbmFyeSgnamF2YScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEZpbmQgSkRLIGxvY2F0aW9uLCBjYW4gYmUgZGlmZmVyZW50XG4gICAgICBmaW5kQnlCaW5hcnkoJ2phdmFjJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYihkaXNjb3ZlcmVkSmF2YUhvbWVzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn1cbiJdfQ==