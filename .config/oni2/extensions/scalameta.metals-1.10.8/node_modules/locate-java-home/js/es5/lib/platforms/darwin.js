"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
/**
 * Uses the Mac's java_home utility to find an appropriate version of Java.
 */
function macFindJavaHome(cb) {
    child_process_1.exec('/usr/libexec/java_home -V', (err, stdout, stderr) => {
        /*
          Output example, which java_home prints to stderr [!]:
          Matching Java Virtual Machines (4):
            1.8.0_60, x86_64:	"Java SE 8"	/Library/Java/JavaVirtualMachines/jdk1.8.0_60.jdk/Contents/Home
            1.7.0_79, x86_64:	"Java SE 7"	/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home
            1.6.0_65-b14-468, x86_64:	"Java SE 6"	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
            1.6.0_65-b14-468, i386:	"Java SE 6"	/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
         */
        // Ditch boilerplate first line, and trim ending newlines.
        let installations = stderr.toString().trim().split('\n').slice(1);
        // Map to paths.
        // TODO: We assume that quotes cannot be in the paths.
        installations = installations.map((install) => install.slice(install.lastIndexOf('"') + 1).trim());
        cb(installations);
    });
}
exports.default = macFindJavaHome;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFyd2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdHMvbGliL3BsYXRmb3Jtcy9kYXJ3aW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBbUM7QUFFbkM7O0dBRUc7QUFDSCxTQUF3QixlQUFlLENBQUMsRUFBMkQ7SUFDakcsb0JBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDLEdBQWlCLEVBQUUsTUFBdUIsRUFBRSxNQUF1QixFQUFFLEVBQUU7UUFDeEc7Ozs7Ozs7V0FPRztRQUNILDBEQUEwRDtRQUMxRCxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRSxnQkFBZ0I7UUFDaEIsc0RBQXNEO1FBQ3RELGFBQWEsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDcEIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBakJELGtDQWlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZXhlY30gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cbi8qKlxuICogVXNlcyB0aGUgTWFjJ3MgamF2YV9ob21lIHV0aWxpdHkgdG8gZmluZCBhbiBhcHByb3ByaWF0ZSB2ZXJzaW9uIG9mIEphdmEuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hY0ZpbmRKYXZhSG9tZShjYjogKGhvbWVzOiBzdHJpbmdbXSwgZXhlY3V0YWJsZUV4dGVuc2lvbj86IHN0cmluZykgPT4gdm9pZCk6IHZvaWQge1xuICBleGVjKCcvdXNyL2xpYmV4ZWMvamF2YV9ob21lIC1WJywgKGVycjogRXJyb3IgfCBudWxsLCBzdGRvdXQ6IEJ1ZmZlciB8IHN0cmluZywgc3RkZXJyOiBCdWZmZXIgfCBzdHJpbmcpID0+IHtcbiAgICAvKlxuICAgICAgT3V0cHV0IGV4YW1wbGUsIHdoaWNoIGphdmFfaG9tZSBwcmludHMgdG8gc3RkZXJyIFshXTpcbiAgICAgIE1hdGNoaW5nIEphdmEgVmlydHVhbCBNYWNoaW5lcyAoNCk6XG4gICAgICAgIDEuOC4wXzYwLCB4ODZfNjQ6XHRcIkphdmEgU0UgOFwiXHQvTGlicmFyeS9KYXZhL0phdmFWaXJ0dWFsTWFjaGluZXMvamRrMS44LjBfNjAuamRrL0NvbnRlbnRzL0hvbWVcbiAgICAgICAgMS43LjBfNzksIHg4Nl82NDpcdFwiSmF2YSBTRSA3XCJcdC9MaWJyYXJ5L0phdmEvSmF2YVZpcnR1YWxNYWNoaW5lcy9qZGsxLjcuMF83OS5qZGsvQ29udGVudHMvSG9tZVxuICAgICAgICAxLjYuMF82NS1iMTQtNDY4LCB4ODZfNjQ6XHRcIkphdmEgU0UgNlwiXHQvTGlicmFyeS9KYXZhL0phdmFWaXJ0dWFsTWFjaGluZXMvMS42LjAuamRrL0NvbnRlbnRzL0hvbWVcbiAgICAgICAgMS42LjBfNjUtYjE0LTQ2OCwgaTM4NjpcdFwiSmF2YSBTRSA2XCJcdC9MaWJyYXJ5L0phdmEvSmF2YVZpcnR1YWxNYWNoaW5lcy8xLjYuMC5qZGsvQ29udGVudHMvSG9tZVxuICAgICAqL1xuICAgIC8vIERpdGNoIGJvaWxlcnBsYXRlIGZpcnN0IGxpbmUsIGFuZCB0cmltIGVuZGluZyBuZXdsaW5lcy5cbiAgICBsZXQgaW5zdGFsbGF0aW9ucyA9IHN0ZGVyci50b1N0cmluZygpLnRyaW0oKS5zcGxpdCgnXFxuJykuc2xpY2UoMSk7XG4gICAgLy8gTWFwIHRvIHBhdGhzLlxuICAgIC8vIFRPRE86IFdlIGFzc3VtZSB0aGF0IHF1b3RlcyBjYW5ub3QgYmUgaW4gdGhlIHBhdGhzLlxuICAgIGluc3RhbGxhdGlvbnMgPSBpbnN0YWxsYXRpb25zLm1hcCgoaW5zdGFsbCkgPT4gaW5zdGFsbC5zbGljZShpbnN0YWxsLmxhc3RJbmRleE9mKCdcIicpICsgMSkudHJpbSgpKTtcbiAgICBjYihpbnN0YWxsYXRpb25zKTtcbiAgfSk7XG59XG4iXX0=