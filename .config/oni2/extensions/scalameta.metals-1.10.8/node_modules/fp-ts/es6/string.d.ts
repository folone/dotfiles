/**
 * @since 2.10.0
 */
import * as E from './Eq'
import * as M from './Monoid'
import * as S from './Semigroup'
import * as O from './Ord'
import * as Sh from './Show'
/**
 * @category instances
 * @since 2.10.0
 */
export declare const Eq: E.Eq<string>
/**
 * `string` semigroup under concatenation.
 *
 * @example
 * import * as S from 'fp-ts/string'
 *
 * assert.deepStrictEqual(S.Semigroup.concat('a', 'b'), 'ab')
 *
 * @category instances
 * @since 2.10.0
 */
export declare const Semigroup: S.Semigroup<string>
/**
 * `string` monoid under concatenation.
 *
 * The `empty` value is `''`.
 *
 * @example
 * import * as S from 'fp-ts/string'
 *
 * assert.deepStrictEqual(S.Monoid.concat('a', 'b'), 'ab')
 *
 * @category instances
 * @since 2.10.0
 */
export declare const Monoid: M.Monoid<string>
/**
 * @category instances
 * @since 2.10.0
 */
export declare const Ord: O.Ord<string>
/**
 * @category instances
 * @since 2.10.0
 */
export declare const Show: Sh.Show<string>
/**
 * An empty `string`.
 *
 * @since 2.10.0
 */
export declare const empty: string
/**
 * Test whether a `string` is empty.
 *
 * @since 2.10.0
 */
export declare const isEmpty: (s: string) => boolean
/**
 * Calculate the number of characters in a `string`.
 *
 * @since 2.10.0
 */
export declare const size: (s: string) => number
