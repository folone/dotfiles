"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonoidProduct = exports.MonoidSum = exports.SemigroupProduct = exports.SemigroupSum = exports.Show = exports.Field = exports.Bounded = exports.Ord = exports.Eq = void 0;
/**
 * @since 2.10.0
 */
var B = __importStar(require("./Bounded"));
var E = __importStar(require("./Eq"));
var F = __importStar(require("./Field"));
var O = __importStar(require("./Ord"));
var S = __importStar(require("./Show"));
var Semigroup_1 = require("./Semigroup");
var Monoid_1 = require("./Monoid");
/**
 * @category instances
 * @since 2.10.0
 */
// tslint:disable-next-line: deprecation
exports.Eq = E.eqNumber;
/**
 * @category instances
 * @since 2.10.0
 */
// tslint:disable-next-line: deprecation
exports.Ord = O.ordNumber;
/**
 * @category instances
 * @since 2.10.0
 */
// tslint:disable-next-line: deprecation
exports.Bounded = B.boundedNumber;
/**
 * @category instances
 * @since 2.10.0
 */
// tslint:disable-next-line: deprecation
exports.Field = F.fieldNumber;
/**
 * @category instances
 * @since 2.10.0
 */
// tslint:disable-next-line: deprecation
exports.Show = S.showNumber;
/**
 * `number` semigroup under addition.
 *
 * @example
 * import { SemigroupSum } from 'fp-ts/number'
 *
 * assert.deepStrictEqual(SemigroupSum.concat(2, 3), 5)
 *
 * @category instances
 * @since 2.10.0
 */
// tslint:disable-next-line: deprecation
exports.SemigroupSum = Semigroup_1.semigroupSum;
/**
 * `number` semigroup under multiplication.
 *
 * @example
 * import { SemigroupProduct } from 'fp-ts/number'
 *
 * assert.deepStrictEqual(SemigroupProduct.concat(2, 3), 6)
 *
 * @category instances
 * @since 2.10.0
 */
// tslint:disable-next-line: deprecation
exports.SemigroupProduct = Semigroup_1.semigroupProduct;
/**
 * `number` monoid under addition.
 *
 * The `empty` value is `0`.
 *
 * @example
 * import { MonoidSum } from 'fp-ts/number'
 *
 * assert.deepStrictEqual(MonoidSum.concat(2, MonoidSum.empty), 2)
 *
 * @category instances
 * @since 2.10.0
 */
// tslint:disable-next-line: deprecation
exports.MonoidSum = Monoid_1.monoidSum;
/**
 * `number` monoid under multiplication.
 *
 * The `empty` value is `1`.
 *
 * @example
 * import { MonoidProduct } from 'fp-ts/number'
 *
 * assert.deepStrictEqual(MonoidProduct.concat(2, MonoidProduct.empty), 2)
 *
 * @category instances
 * @since 2.10.0
 */
// tslint:disable-next-line: deprecation
exports.MonoidProduct = Monoid_1.monoidProduct;
