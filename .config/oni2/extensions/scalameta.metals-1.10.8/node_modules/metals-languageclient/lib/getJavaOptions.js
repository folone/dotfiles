"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJavaOptions = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const shell_quote_1 = require("shell-quote");
/**
 * Compute all the relevant Java options by combining:
 * - the `.jvmopts` file in the workspace root
 * - the `JAVA_OPTS` environment variable
 * - the `JAVA_FLAGS` environment variable
 *
 * @param workspaceRoot the workspace root path, if any
 */
function getJavaOptions(workspaceRoot) {
    const allOptions = [...fromEnv(), ...fromJvmoptsFile(workspaceRoot)];
    return allOptions.filter(isValidOption).map(sanitizeOption);
}
exports.getJavaOptions = getJavaOptions;
function sanitizeOption(option) {
    return option.trim();
}
function isValidOption(option) {
    return (option.startsWith("-") &&
        // We care most about enabling options like HTTP proxy settings.
        // We don't include memory options because Metals does not have the same
        // memory requirements as for example the sbt build.
        !option.startsWith("-Xms") &&
        !option.startsWith("-Xmx") &&
        !option.startsWith("-Xss") &&
        // Do not alter stdout that we capture when using Coursier
        option !== "-XX:+PrintCommandLineFlags");
}
function fromJvmoptsFile(workspaceRoot) {
    if (workspaceRoot) {
        const jvmoptsPath = path.join(workspaceRoot, ".jvmopts");
        if (fs.existsSync(jvmoptsPath)) {
            console.debug("Using JVM options set in " + jvmoptsPath);
            const raw = fs.readFileSync(jvmoptsPath, "utf8");
            return raw.match(/[^\r\n]+/g) || [];
        }
    }
    return [];
}
function fromEnv() {
    function parseEnvVariable(variable) {
        if (variable) {
            console.debug("Using JAVA options set in JAVA_OPTS");
            return shell_quote_1.parse(variable).filter((entry) => {
                if (typeof entry === "string") {
                    return true;
                }
                else {
                    console.debug(`Ignoring unexpected JAVA_OPTS token: ${entry}`);
                    return false;
                }
            });
        }
        else {
            return [];
        }
    }
    const javaOpts = parseEnvVariable(process.env.JAVA_OPTS);
    const javaFlags = parseEnvVariable(process.env.JAVA_FLAGS);
    return javaOpts.concat(javaFlags);
}
