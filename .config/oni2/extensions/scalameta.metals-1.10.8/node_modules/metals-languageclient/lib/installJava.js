"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.installJava = void 0;
const path = __importStar(require("path"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const fs = __importStar(require("fs"));
const mkdirp = require("mkdirp");
const pcp = __importStar(require("promisify-child-process"));
const os = __importStar(require("os"));
const util_1 = require("util");
const stream_1 = require("stream");
const defaultJabbaVersion = "0.11.2";
function installJava({ javaVersion, jabbaVersion = defaultJabbaVersion, outputChannel, }) {
    const bin = path.join(os.homedir(), "bin");
    const jabbaUrl = `https://github.com/shyiko/jabba/releases/download/${jabbaVersion}/jabba-${jabbaVersion}-${jabbaUrlSuffix()}`;
    const jabbaPath = path.join(bin, jabbaBinaryName());
    return mkdirp(bin)
        .then(() => download({
        url: jabbaUrl,
        outputPath: jabbaPath,
        makeExecutable: true,
    }))
        .then(() => pcp.exec(`"${jabbaPath}" ls-remote`))
        .then((out) => outputToString(out.stdout)
        .split("\n")
        .filter((str) => str.includes(javaVersion))[0]
        .trim())
        .then((java) => {
        var _a, _b;
        outputChannel.appendLine(`Installing ${java}`);
        const jabbaSpawn = pcp.spawn(`${jabbaPath}`, ["install", java], {});
        (_a = jabbaSpawn.stdout) === null || _a === void 0 ? void 0 : _a.on("data", outputChannel.append);
        (_b = jabbaSpawn.stderr) === null || _b === void 0 ? void 0 : _b.on("data", outputChannel.append);
        return jabbaSpawn
            .then(() => outputChannel.appendLine(`${java} installed`))
            .then(() => pcp.exec(`${jabbaPath} which --home ${java}`))
            .then((e) => outputToString(e.stdout).trim());
    })
        .catch((err) => {
        console.debug(err);
        outputChannel.appendLine(err.message);
        throw err;
    });
}
exports.installJava = installJava;
function jabbaUrlSuffix() {
    const runnerOs = process.platform;
    switch (runnerOs.toLowerCase()) {
        case "linux":
            return "linux-amd64";
        case "darwin":
            return "darwin-amd64";
        case "win32":
            return "windows-amd64.exe";
        default:
            throw new Error(`unknown runner OS: ${runnerOs}, expected one of Linux, macOS or Windows.`);
    }
}
function jabbaBinaryName() {
    const isWindows = process.platform === "win32";
    if (isWindows)
        return "jabba.exe";
    else
        return "jabba";
}
function download({ url, outputPath: outputFile, makeExecutable: exec, }) {
    return node_fetch_1.default(url)
        .then((response) => {
        if (!response.ok) {
            throw new Error(`Error while downloading Java from ${url}`);
        }
        return util_1.promisify(stream_1.pipeline)(response.body, fs.createWriteStream(outputFile).on("close", () => {
            if (exec)
                fs.chmodSync(outputFile, 755);
        }));
    })
        .then(() => outputFile);
}
function outputToString(out, enc = "utf8") {
    return out instanceof Buffer ? out.toString(enc) : out ? out : "";
}
