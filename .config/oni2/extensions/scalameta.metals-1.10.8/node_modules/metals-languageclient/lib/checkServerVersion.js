"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkServerVersion = void 0;
const ConfigurationTarget_1 = require("./interfaces/ConfigurationTarget");
const semver = __importStar(require("semver"));
const configSection = "serverVersion";
function checkServerVersion({ config, updateConfig, onOutdated, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { serverVersion, latestServerVersion, configurationTarget } = serverVersionInfo(config);
        const isOutdated = (() => {
            try {
                return semver.lt(serverVersion, latestServerVersion);
            }
            catch (_e) {
                // serverVersion has an invalid format
                // ignore the exception here, and let subsequent checks handle this
                return false;
            }
        })();
        if (isOutdated) {
            const message = `You are running an out-of-date version of Metals. The latest version is ${latestServerVersion}, but you have configured a custom server version ${serverVersion}`;
            const upgradeChoice = `Upgrade to ${latestServerVersion} now`;
            const openSettingsChoice = "Open settings";
            const dismissChoice = "Not now";
            const upgrade = () => updateConfig({ configSection, latestServerVersion, configurationTarget });
            onOutdated({
                message,
                upgradeChoice,
                openSettingsChoice,
                dismissChoice,
                upgrade,
            });
        }
    });
}
exports.checkServerVersion = checkServerVersion;
function serverVersionInfo(config) {
    const computedVersion = config.get(configSection);
    const { defaultValue, globalValue, workspaceValue } = config.inspect(configSection);
    const configurationTarget = (() => {
        if (globalValue && globalValue !== defaultValue) {
            return ConfigurationTarget_1.ConfigurationTarget.Global;
        }
        if (workspaceValue && workspaceValue !== defaultValue) {
            return ConfigurationTarget_1.ConfigurationTarget.Workspace;
        }
        return ConfigurationTarget_1.ConfigurationTarget.Workspace;
    })();
    return {
        serverVersion: computedVersion,
        latestServerVersion: defaultValue,
        configurationTarget,
    };
}
