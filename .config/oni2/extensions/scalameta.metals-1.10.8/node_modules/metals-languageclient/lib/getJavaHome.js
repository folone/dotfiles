"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJavaHome = void 0;
const TaskEither_1 = require("fp-ts/lib/TaskEither");
const TE = __importStar(require("fp-ts/lib/TaskEither"));
const E = __importStar(require("fp-ts/lib/Either"));
const pipeable_1 = require("fp-ts/lib/pipeable");
const locate_java_home_1 = __importDefault(require("locate-java-home"));
const semver = __importStar(require("semver"));
const util_1 = require("./util");
/**
 * Computes the user's Java Home path, using various strategies:
 *
 * - explicitly configured value
 * - JAVA_HOME environment variable
 * - the most recent compatible Java version found on the computer
 *   (with a preference for JDK over JRE)
 *
 * @param configuredJavaHome metals.javaHome value as read from the configuration
 */
function getJavaHome(configuredJavaHome) {
    return util_1.toPromise(pipeable_1.pipe(fromConfig(configuredJavaHome), TE.orElse(fromEnv), TE.orElse(locate)));
}
exports.getJavaHome = getJavaHome;
function fromConfig(configuredJavaHome) {
    if (typeof configuredJavaHome === "string" &&
        configuredJavaHome.trim() !== "") {
        return TE.right(configuredJavaHome);
    }
    else {
        return TE.left({});
    }
}
function fromEnv() {
    const javaHome = process.env["JAVA_HOME"];
    return javaHome ? TE.right(javaHome) : TE.left({});
}
function locate() {
    return pipeable_1.pipe(locateJavaHome({ version: ">=1.8 <=11" }), TaskEither_1.chain((javaHomes) => {
        if (!javaHomes || javaHomes.length === 0) {
            return TE.left(new Error("No suitable Java version found"));
        }
        else {
            javaHomes.sort((a, b) => {
                const byVersion = -semver.compare(a.version, b.version);
                if (byVersion === 0)
                    return b.security - a.security;
                else
                    return byVersion;
            });
            const jdkHome = javaHomes.find((j) => j.isJDK);
            if (jdkHome) {
                return TE.right(jdkHome.path);
            }
            else {
                return TE.right(javaHomes[0].path);
            }
        }
    }));
}
function locateJavaHome(opts) {
    return () => new Promise((resolve) => locate_java_home_1.default(opts, (err, res) => err != null ? resolve(E.left(err)) : resolve(E.right(res))));
}
