"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.restartServer = void 0;
const vscode_languageserver_protocol_1 = require("vscode-languageserver-protocol");
const child_process_1 = require("child_process");
const ShowMessage_1 = require("../interfaces/ShowMessage");
const timeoutMs = 4000;
/**
 * Try to gracefully shutdown the server using LSP `shutdown` and `exit` endpoints.
 * If the server is unresponsive, fall back to killing its process.
 *
 * @param client
 * @param workspace
 */
function restartServer(client, showMessage) {
    return () => {
        const { showInformationMessage, showWarningMessage } = ShowMessage_1.normalize(showMessage);
        const timeout = (ms) => new Promise((_resolve, reject) => setTimeout(reject, ms));
        const gracefullyTerminate = client
            .sendRequest(vscode_languageserver_protocol_1.ShutdownRequest.type)
            .then(() => {
            client.sendNotification(vscode_languageserver_protocol_1.ExitNotification.type);
            showInformationMessage("Metals is restarting");
        });
        return Promise.race([gracefullyTerminate, timeout(timeoutMs)]).catch(() => {
            showWarningMessage("Metals is unresponsive, killing the process and starting a new server.", "warning");
            // NOTE(gabro): we know LanguageClient contains the _serverProcess private property,
            // so we use a cast to access it
            const serverPid = client._serverProcess.pid;
            child_process_1.exec(`kill ${serverPid}`);
        });
    };
}
exports.restartServer = restartServer;
